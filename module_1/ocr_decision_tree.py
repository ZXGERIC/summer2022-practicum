# -*- coding: utf-8 -*-
"""Paddle_Module_1_OCR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16y-L3JT_CLn9PYVtKqxr55t3YZEHkItv

## Install packages
"""

!python3 -m pip install paddlepaddle-gpu
!pip install "paddleocr>=2.0.1"

"""## Import packages"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2

from paddleocr import PaddleOCR,draw_ocr
from PIL import Image
from sklearn.model_selection import train_test_split

from IPython import display

from sklearn import tree

"""## Map Google drive"""

drive.mount('/content/drive')

"""## Unzip picture data"""

!unzip -u "/content/drive/MyDrive/practicum/final_data.zip" -d "/content" > extract.txt

"""## Read product data"""

df = pd.read_csv("/content/final_data/product_model_serial_numbers.csv")
df.columns= df.columns.str.lower()
df["example"] = "/content/final_data/" + df["example"]

"""## Clean product data"""

df_clean = df.loc[df.product_line.notnull()]
df_clean.reset_index(drop=True, inplace=True)

df_clean.head()

"""## Transform Data"""

df_clean.loc[df_clean.product_line.str.contains("LAUNDRY", case=False), "product_line"] = "Home Laundry"
df_clean.loc[df_clean.product_line.str.contains("REFRIGERATION", case=False), "product_line"] = "Refrigeration"
df_clean.loc[df_clean.product_line.str.contains("DISHWASHER", case=False), "product_line"] = "Dishwasher"

df_clean.head()

"""## Feature engineering

### Transform X
"""

# initiate a class to do OCR
ocr = PaddleOCR(use_angle_cls=False, lang='en')

# initiate a list to save results of OCR matching
result = []

# loop through each row of the CSV file
for index, row in df_clean.iterrows():

  # read in image data and get OCR result and save it in ocr_result
  ocr_result = ocr.ocr(row["example"], cls=False)

  map_result = [0, 0, 0, 0]

  # loop through each box and text to find the match 
  # save results to the result list
  for box, text in ocr_result:
    label = text[0].upper().strip()
    if label.find("DISH") != -1:
      map_result[0] = 1
    elif label.find("DRYER") != -1:
      map_result[1] = 1
    elif label.find("LAUNDRY") != -1:
      map_result[2] = 1
    elif label.find("REFRI") != -1:
      map_result[3] = 1

  result.append(map_result)

# derive new features from model numbers

def add_features(row):
  model_number = str(row["model_number"])[:2].lower()
  if model_number in df_clean.model_number.str[:2].value_counts()[:5]:
    row[model_number] = 1

  return row

data = df_clean.apply(add_features, axis=1)

data[['dish', 'dryer', 'laundry', 'refri']] = pd.DataFrame(result)



# remove unnecessary columns from X

columns_keep = sorted(list(set(data.columns.to_list()) - set(df_clean.columns.to_list())))
X = data[columns_keep]
X.fillna(0, inplace=True)

# if we don't want to leverage the model number in feature engineering, then uncomment the following line of code
# X = X[["dish", "dryer", "laundry", "refri"]]
X

"""### Transform Y"""

Y = data.product_line.astype('category').cat.codes
Y

"""## Split training and test data"""

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42, stratify=Y)

"""## Decision Tree"""

clf = tree.DecisionTreeClassifier()

clf = clf.fit(X_train, y_train)

y_predict = clf.predict(X_test)

accuracy = sum(y_predict == y_test) / len(y_test)

print(f"Accuracy is {accuracy}")
